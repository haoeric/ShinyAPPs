{
    "collab_server" : "",
    "contents" : "## max data size\noptions(shiny.maxRequestSize=1024^10) \n\nshinyServer(function(input, output, session) {\n   \n    ##-----------------------------------Load Data--------------------------------------\n    v <- reactiveValues(data = NULL,\n                        FlowSOMstatus = \"No\",\n                        DiffusionMapStatus = \"No\")\n    \n    \n    ## Load cytofkit RData object\n    observeEvent(input$goButton, {\n        cytofkitObj <- input$cytofkitObj\n        if (is.null(cytofkitObj)){\n            v$data <- NULL\n        }else{\n            cat(cytofkitObj$datapath)\n            load(cytofkitObj$datapath)\n            v$data <- analysis_results\n            if(is.null(v$data$resultDir)){\n                v$data$resultDir <- path.expand(\"~\")  ## default save to home if not specified\n            }\n            if(is.null(v$data$rawFCSdir)){\n                v$data$rawFCSdir <- path.expand(\"~\")  ## default to be home if not specified\n            }\n            if(is.null(v$data$projectName)){\n                v$data$projectName <- \"cytofkit_shinyAPP_output\"\n            }\n        }\n    })\n    \n    ## Save and parse cytofkit RData object\n    observeEvent(input$saveButton, {\n        if (!is.null(v$data)){\n            withProgress(message=paste0('Saving Results to', v$data$resultDir), value=0, {\n                analysis_results <<- v$data\n                save(analysis_results, file = paste0(v$data$resultDir, .Platform$file.sep, v$data$projectName, \".RData\"))\n                cytof_writeResults(analysis_results)\n            })\n            ## open the results directory\n            opendir(v$data$resultDir)\n        }\n    })\n    \n    ## result object which will be updated by S_runFlowSOM\n    observeEvent(input$S_runFlowSOM, {\n        if(!is.null(v$data) && !is.null(input$s_markerSelect)){\n            obj <- v$data\n            withProgress(message=paste0('Runing FlowSOM using k=', input$S_FlowSOM_k), value=0, {\n                FlowSOM_cluster <- cytof_cluster(xdata = obj$expressionData[ ,input$s_markerSelect],\n                                                 method = \"FlowSOM\",\n                                                 FlowSOM_k = input$S_FlowSOM_k)\n            })\n            \n            ## update FlowSOM cluster results\n            obj$clusterRes[[\"FlowSOM\"]] <- FlowSOM_cluster\n            ## update the project name\n            obj$projectName <- paste0(obj$projectName, \"_cytofkit_ShinyApp_Output\")\n            v$data <- obj\n            v$FlowSOMstatus <- \"No\"\n        }\n    })\n    \n    ## result object which will be updated by P_runDiffusionmap\n    observeEvent(input$P_runDiffusionmap, {\n        \n        if(!is.null(v$data)){\n            obj <- v$data\n            usedClusters <- input$p_clusterFilter\n            clusterCheck <- obj$clusterRes[[input$p_clusterMethod]] %in% usedClusters\n            mdata <- obj$expressionData[clusterCheck, ]\n            mcluster <- obj$clusterRes[[input$p_clusterMethod]][clusterCheck]\n            withProgress(message=\"Runing Diffusionmap\", value=0, {\n                diffmapRes <- cytof_progression(data = mdata, \n                                                cluster = mcluster, \n                                                method = \"diffusionmap\", \n                                                distMethod = input$P_distMethod,\n                                                out_dim = input$P_outDim,\n                                                clusterSampleMethod = input$P_sampleMethod,\n                                                clusterSampleSize = input$P_clusterSampleSize)\n            })\n            \n            ## update progressionRes results\n            obj$progressionRes <- diffmapRes\n            v$data <- obj\n            v$DiffusionMapStatus <- \"Yes\"\n        }\n    })\n    \n    ## Scatter plot methods\n    visualizationMethods <- reactive({\n        if(is.null(v$data)){\n            return(NULL)\n        }else{\n            return(v$data$visualizationMethods)\n        }\n    })\n    \n    ## Scatter plot functions\n    visualizationFunctions <- reactive({\n        if(is.null(v$data)){\n            return(NULL)\n        }else{\n            return(c(names(v$data$clusterRes), \n                     colnames(v$data$expressionData),\n                     \"FacetByMarker\",\n                     \"ColorBySample\",\n                     \"DensityPlot\",\n                     \"DotPlot\"))\n        }\n    })\n    \n    ## cluster methods\n    clusterMethods <- reactive({\n        if(is.null(v$data))\n            return(NULL)\n        cMethods <- names(v$data$clusterRes)\n        return(cMethods)\n    })\n    \n    ## progression labs\n    progressionLabs <- reactive({\n        if(is.null(v$data))\n            return(NULL)\n        if(is.null(v$data$progressionRes))\n            return(NULL)\n        progressionLabs <- colnames(v$data$progressionRes[[3]])\n        return(progressionLabs)\n    })\n    \n    \n    ##--------------------------------Summary Panel--------------------------------\n    \n    output$summaryText1 <- renderText({\n        if(is.null(v$data))\n            return(NULL)\n        paste0(\"-- \", nrow(v$data[[1]]), \"cells x \", ncol(v$data[[1]]), \"markers\")\n    })\n    \n    output$summaryText2 <- renderText({\n        if(is.null(v$data))\n            return(NULL)\n        paste0(\"-- \", paste(names(v$data$clusterRes), collapse = \" | \"))\n    })\n    \n    output$summaryText3 <- renderText({\n        if(is.null(v$data))\n            return(NULL)\n        paste0(\"-- \", paste(v$data$visualizationMethods, collapse =  \" | \"))\n    })\n    \n    output$summaryText4 <- renderText({\n        if(is.null(v$data))\n            return(NULL)\n        paste0(\"-- \", ifelse(is.null(v$data$progressionRes), \"NULL\", \n                             sub(\"_[0-9]*$\", \"\", colnames(v$data$progressionRes$progressionData)[1])))\n    })\n    \n    output$sampleSelect <- renderUI({\n        if(is.null(v$data)){\n            return(NULL)\n        }else{\n            sampleNames <- unique(sub(\"_[0-9]*$\", \"\", row.names(v$data$expressionData)))\n            checkboxGroupInput('samples', NULL, \n                               sampleNames, selected = sampleNames)\n        }   \n    })\n    \n    \n    ##--------------------------------Scatter Plot--------------------------------\n    \n    output$S_PlotMethod <- renderUI({\n        if(is.null(v$data) || is.null(visualizationMethods())){\n            return(NULL)\n        }else{\n            selectInput('s_PlotMethod', 'Plot Method:', choices = visualizationMethods(), \n                        selected = visualizationMethods()[1], width = \"100%\")\n        }   \n    })\n    \n    output$S_PlotFunction <- renderUI({\n        if(is.null(v$data) || is.null(visualizationFunctions())){\n            return(NULL)\n        }else{\n            selectInput('s_PlotFunction', 'Plot Function:', choices = visualizationFunctions(), \n                        selected = visualizationFunctions()[1], width = \"100%\")\n        }   \n    })\n    \n    output$S_markerSelect <- renderUI({\n        if(is.null(v$data)){\n            return(NULL)\n        }else{\n            markerNames <- colnames(v$data$expressionData)\n            checkboxGroupInput('s_markerSelect', strong('Select Markers:'),\n                               markerNames, selected = markerNames, inline = TRUE)\n        }   \n    })\n    \n    output$S_ifFlowSOM <- renderUI({\n        if(is.null(v$data)){\n            return(NULL)\n        }else{\n            selectInput('s_ifFlowSOM', 'FlowSOM:', choices = c(\"Yes\", \"No\"), \n                        selected = v$FlowSOMstatus, width = \"100%\")\n        }   \n    })\n    \n    output$S_ScatterPlot <- renderPlot({\n        if(is.null(v$data) || is.null(input$s_PlotMethod) || is.null(input$s_PlotFunction)){\n            return(NULL)\n        }else{\n            gp <- scatterPlot(obj = v$data,\n                              plotMethod = input$s_PlotMethod,\n                              plotFunction = input$s_PlotFunction,\n                              pointSize = input$S_PointSize,\n                              addLabel = input$addLabel,\n                              labelSize = input$S_LabelSize,\n                              sampleLabel = input$sampleLabel,\n                              FlowSOM_k = input$S_FlowSOM_k, \n                              selectSamples = input$samples, \n                              facetPlot = input$facetPlot,\n                              colorPalette = input$colorPalette,\n                              labelRepel = input$labelRepel,\n                              removeOutlier = TRUE)\n        }\n        plot(gp)\n    }, height = 700, width = 750)\n    \n    \n    ##-------------------------------Heat Map--------------------------------\n    \n    output$H_plotCluster <- renderUI({\n        if(is.null(v$data) || is.null(clusterMethods())){\n            return(NULL)\n        }else{\n            selectInput('h_plotCluster', 'Cluster Method:', choices = clusterMethods(), \n                        selected = clusterMethods()[1], width = \"100%\")\n        }   \n    })\n    \n    \n    output$H_heatmapPlot <- renderPlot({\n        if(is.null(v$data) || is.null(input$h_plotCluster))\n            return(NULL)\n        heatMap(data = v$data, \n                clusterMethod = input$h_plotCluster, \n                type = input$H_plotMethod, \n                selectSamples = input$samples,\n                cex_row_label= input$H_rowLabelSize, \n                cex_col_label= input$H_colLabelSize, \n                scaleMethod = input$H_scaleMethod)\n    }, height = 800, width = 850)\n    \n    \n    ##-------------------------------Progression Plot--------------------------------\n    output$P_plotType <- renderUI({\n        s <- \"Run Diffusionmap\"\n        if(!is.null(v$data)){\n            if(!is.null(v$data$progressionRes) || v$DiffusionMapStatus == \"Yes\")\n                s <- \"Subset Relationship\"\n        }\n        \n        radioButtons(\"p_plotType\", NULL,\n                     c(\"Subset Relationship\", \"Marker Expression Profile\", \"Run Diffusionmap\"), \n                     selected = s,\n                     inline = TRUE)\n    })\n    \n    \n    ## subset relationship plot\n    \n    output$P_xlab <- renderUI({\n        if(is.null(v$data) || is.null(progressionLabs())){\n            return(NULL)\n        }else{\n            selectInput('p_xlab', 'Plot X:', choices = progressionLabs(), \n                        selected = progressionLabs()[1], width = \"100%\")\n        }   \n    })\n    \n    output$P_ylab <- renderUI({\n        if(is.null(v$data) || is.null(progressionLabs())){\n            return(NULL)\n        }else{\n            selectInput('p_ylab', 'Plot Y:', choices = progressionLabs(), \n                        selected = progressionLabs()[2], width = \"100%\")\n        }   \n    })\n    \n    output$P_scatterPlot <- renderPlot({\n        if(is.null(v$data) || is.null(v$data$progressionRes) || is.null(input$p_xlab) || is.null(input$p_ylab)){\n            return(NULL)\n        }else{\n            \n            obj <- v$data$progressionRes\n            data <- data.frame(obj$progressionData, \n                               cluster = obj$sampleCluster,\n                               sample = sub(\"_[0-9]*$\", \"\", row.names(obj$sampleData)))\n            \n            gp <- cytof_clusterPlot(data = data, \n                                    xlab = input$p_xlab, \n                                    ylab = input$p_ylab, \n                                    cluster = \"cluster\", \n                                    sample = \"sample\",\n                                    title = \"Subset Relationship\", \n                                    type = ifelse(input$facetPlot, 2, 1),\n                                    point_size = input$P_PointSize, \n                                    addLabel = input$addLabel, \n                                    labelSize = input$P_LabelSize, \n                                    sampleLabel = input$sampleLabel, \n                                    labelRepel = input$labelRepel,\n                                    fixCoord = FALSE)\n        }\n        plot(gp)\n    }, height = 700, width = 750)\n    \n    ## marker expression profile\n    \n    output$P_orderBy <- renderUI({\n        if(is.null(v$data) || is.null(progressionLabs())){\n            return(NULL)\n        }else{\n            selectInput('p_orderBy', 'Cell Order By:', choices = progressionLabs(), \n                        selected = progressionLabs()[1], width = \"100%\")\n        }   \n    })\n\n    output$P_markerSelect <- renderUI({\n        if(is.null(v$data) || is.null(v$data$progressionRes)){\n            return(NULL)\n        }else{\n            markerNames <- colnames(v$data$progressionRes$sampleData)\n            initNum <- ifelse(length(markerNames) >=4, 4, 1)\n            selectizeInput('p_markerSelect', 'Select Markers:', \n                        choices = markerNames, selected = markerNames[1:initNum], \n                        multiple = TRUE, width = \"100%\")\n            # checkboxGroupInput('p_markerSelect', strong('Select Markers:'), \n            #                    markerNames, selected = markerNames, inline = TRUE)\n        }   \n    })\n    \n    output$P_clusterSelect <- renderUI({\n        if(is.null(v$data) || is.null(v$data$progressionRes)){\n            return(NULL)\n        }else{\n            clusterIDs <- sort(unique(v$data$progressionRes$sampleCluster))\n            selectizeInput('p_clusterSelect', 'Select Clusters:', \n                        choices = clusterIDs, selected = clusterIDs, \n                        multiple = TRUE, width = \"100%\")\n            # checkboxGroupInput('p_clusterSelect', strong('Select Clusters:'), \n            #                    clusterIDs, selected = clusterIDs, inline = TRUE)\n        }   \n    })\n    \n    \n    output$P_markerPlot <- renderPlot({\n        if(is.null(v$data) || is.null(v$data$progressionRes) || is.null(input$p_markerSelect) || is.null(input$p_clusterSelect) || is.null(input$p_orderBy))\n            return(NULL)\n        \n        data <- data.frame(v$data$progressionRes$sampleData,\n                           cluster = v$data$progressionRes$sampleCluster, \n                           v$data$progressionRes$progressionData,\n                           check.names = FALSE)\n        if(input$P_combineTrends){\n            pp <- cytof_expressionTrends(data, \n                                        markers = input$p_markerSelect, \n                                        clusters = input$p_clusterSelect, \n                                        orderCol = input$p_orderBy, \n                                        clusterCol = \"cluster\", \n                                        reverseOrder = input$P_reverseOrder,\n                                        addClusterLabel = input$addLabel,\n                                        clusterLabelSize = input$P_LabelSize2,\n                                        segmentSize = 0.5,\n                                        min_expr = NULL) \n        }else{\n            pp <- cytof_progressionPlot(data, \n                                        markers = input$p_markerSelect, \n                                        clusters = input$p_clusterSelect, \n                                        orderCol = input$p_orderBy, \n                                        clusterCol = \"cluster\", \n                                        reverseOrder = input$P_reverseOrder,\n                                        addClusterLabel = input$addLabel,\n                                        clusterLabelSize = input$P_LabelSize2,\n                                        segmentSize = 0.5,\n                                        min_expr = NULL) \n        }\n        \n        plot(pp)\n                                          \n    }, height = 800, width = 850)\n    \n    ## Run Diffusionmap\n    \n    output$P_clusterTable <- renderTable({\n        if(is.null(v$data) || is.null(clusterMethods())){\n            return(NULL)\n        }else{\n            clusterTable <- t(as.matrix(table(v$data$clusterRes[[input$p_clusterMethod]])))\n            out <- as.data.frame(clusterTable, row.names = \"Cell Counts\")\n            colnames(out) <- paste(\"Cluster\", colnames(out))\n            out\n        }   \n    })\n    \n    output$P_clusterFilter <- renderUI({\n        if(is.null(v$data) || is.null(clusterMethods())){\n            return(NULL)\n        }else{\n            obj <- v$data\n            clusterIDs <- sort(unique(obj$clusterRes[[input$p_clusterMethod]]))\n            selectizeInput('p_clusterFilter', 'Filter Clusters:', \n                           choices = clusterIDs, selected = clusterIDs, \n                           multiple = TRUE, width = \"100%\")\n        }   \n    })\n    \n    output$P_clusterMethod <- renderUI({\n        if(is.null(v$data) || is.null(clusterMethods())){\n            return(NULL)\n        }else{\n            selectInput('p_clusterMethod', 'Cluster Method:', choices = clusterMethods(), \n                        selected = clusterMethods()[1], width = \"100%\")\n        }   \n    })\n})\n\n\n\n",
    "created" : 1468216201837.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "63328890",
    "id" : "C8EEEE0C",
    "lastKnownWriteTime" : 1468377230,
    "last_content_update" : 1468377230817,
    "path" : "~/GitProject/cytofkitShinyAPP/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}