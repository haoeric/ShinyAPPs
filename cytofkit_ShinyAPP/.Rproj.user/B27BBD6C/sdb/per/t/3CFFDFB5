{
    "collab_server" : "",
    "contents" : "## loading pacakge\nrequire(cytofkit)\nrequire(ggplot2)\nrequire(reshape2)\n\n## load library for cytof_expressionTrends\nlibrary(VGAM)\nlibrary(plyr)\n\n\n## Main function for scatter plot\nscatterPlot <- function(obj, plotMethod, plotFunction, pointSize=1, \n                      addLabel=TRUE, labelSize=1, sampleLabel = TRUE,\n                      FlowSOM_k = 40, selectSamples, facetPlot = FALSE, \n                      colorPalette = \"bluered\", labelRepel = FALSE, removeOutlier = TRUE){\n    \n    data <- cbind(obj$expressionData, \n                  obj$dimReducedRes[[plotMethod]], \n                  do.call(cbind, obj$clusterRes))\n    data <- as.data.frame(data)\n    xlab <- colnames(obj$dimReducedRes[[plotMethod]])[1]\n    ylab <- colnames(obj$dimReducedRes[[plotMethod]])[2]\n    row.names(data) <- row.names(obj$expressionData)\n    \n    clusterMethods <- names(obj$clusterRes)\n    samples <- sub(\"_[0-9]*$\", \"\", row.names(obj$expressionData))\n    data <- data[samples %in% selectSamples, ]\n    nsamples <- samples[samples %in% selectSamples]\n    data$sample <- nsamples\n    sample_num <- length(unique(nsamples))\n\n    if(plotFunction == \"DensityPlot\"){\n        colPalette <- colorRampPalette(c(\"blue\", \"turquoise\", \"green\", \n                                         \"yellow\", \"orange\", \"red\"))\n        densCol <- densCols(data[, c(xlab, ylab)], colramp = colPalette)\n        data$densCol <- densCol\n        gp <- ggplot(data, aes_string(x=xlab, y=ylab)) + \n            geom_point(colour=densCol, size = pointSize) + ggtitle(\"Density Plot\") +\n            theme(legend.position = \"right\") + xlab(xlab) + ylab(ylab) + theme_bw() + \n            theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +\n            theme(axis.text=element_text(size=14), axis.title=element_text(size=18,face=\"bold\"))\n    }else if(plotFunction == \"DotPlot\"){\n        gp <- ggplot(data, aes_string(x=xlab, y=ylab)) + \n            geom_point(size = pointSize) + ggtitle(\"Dot Plot\") +\n            xlab(xlab) + ylab(ylab) + theme_bw() + \n            theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +\n            theme(axis.text=element_text(size=14), axis.title=element_text(size=18,face=\"bold\"))\n    }else if(plotFunction == \"ColorBySample\"){\n        size_legend_row <- ceiling(sample_num/4)\n        sample <- \"sample\"\n        gp <- ggplot(data, aes_string(x=xlab, y=ylab, colour = sample)) +\n            geom_point(size = pointSize) + ggtitle(\"Color By Sample\") +\n            xlab(xlab) + ylab(ylab) + theme_bw() + theme(legend.position = \"bottom\") +\n            theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +\n            theme(axis.text=element_text(size=14), axis.title=element_text(size=18,face=\"bold\")) +\n            guides(colour = guide_legend(nrow = size_legend_row, override.aes = list(size = 4)))\n    }else if(plotFunction == \"FacetByMarker\"){\n        gp <- cytof_wrap_colorPlot(data = data, \n                              xlab = xlab, \n                              ylab = ylab, \n                              markers = colnames(obj$expressionData), \n                              colorPalette = colorPalette,\n                              pointSize = pointSize, \n                              removeOutlier = TRUE)\n        \n    }else if(plotFunction %in% clusterMethods){\n        gp <- cytof_clusterPlot(data = data, \n                                xlab = xlab, \n                                ylab = ylab, \n                                cluster = plotFunction, \n                                sample = \"sample\",\n                                title = plotFunction, \n                                type = ifelse(facetPlot, 2, 1),\n                                point_size = pointSize, \n                                addLabel = addLabel, \n                                labelSize = labelSize, \n                                sampleLabel = sampleLabel,\n                                labelRepel = labelRepel,\n                                fixCoord = FALSE)\n    }else{\n        gp <- cytof_colorPlot(data = data, \n                              xlab = xlab, \n                              ylab = ylab, \n                              zlab = plotFunction, \n                              colorPalette = colorPalette,\n                              pointSize = pointSize, \n                              removeOutlier = TRUE)\n    }\n    \n    return(gp)\n}\n\n## Facet wrap plot of marker exporession\ncytof_wrap_colorPlot <- function(data, xlab, ylab, markers, \n                            colorPalette = c(\"bluered\", \"topo\", \"heat\", \"terrain\", \"cm\"), \n                            pointSize=1, \n                            removeOutlier = TRUE){\n    \n    remove_outliers <- function(x, na.rm = TRUE, ...) {\n        qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)\n        H <- 1.5 * IQR(x, na.rm = na.rm)\n        y <- x\n        y[x < (qnt[1] - H)] <- qnt[1] - H\n        y[x > (qnt[2] + H)] <- qnt[2] + H\n        y\n    }\n    \n    data <- as.data.frame(data)\n    title <- \"Marker Expression Level Plot\"\n    data <- data[,c(xlab, ylab, markers)]\n    \n    if(removeOutlier){\n        for(m in markers){\n            data[[m]] <- remove_outliers(data[ ,m])\n        }\n    }\n    \n    data <- melt(data, id.vars = c(xlab, ylab), \n                 measure.vars = markers,\n                 variable.name = \"markers\", \n                 value.name = \"Expression\")\n\n    colorPalette <- match.arg(colorPalette)\n    switch(colorPalette,\n           bluered = {\n               myPalette <- colorRampPalette(c(\"blue\", \"white\", \"red\"))\n           },\n           topo = {\n               myPalette <- colorRampPalette(topo.colors(50))\n           },\n           heat = {\n               myPalette <- colorRampPalette(heat.colors(50))\n           },\n           terrain = {\n               myPalette <- colorRampPalette(terrain.colors(50))\n           },\n           cm = {\n               myPalette <- colorRampPalette(cm.colors(50))\n           }\n    )\n    zlength <- nrow(data)\n    grid_col_num <- round(sqrt(length(markers)))\n    gp <- ggplot(data, aes_string(x = xlab, y = ylab, colour = \"Expression\")) + \n        facet_wrap(~markers, ncol = grid_col_num, scales = \"fixed\") +\n        scale_colour_gradientn(name = \"Expression\", colours = myPalette(zlength)) +\n        geom_point(size = pointSize) + theme_bw() + coord_fixed() +\n        theme(legend.position = \"right\") + xlab(xlab) + ylab(ylab) + ggtitle(title) +\n        theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +\n        theme(axis.text=element_text(size=8), axis.title=element_text(size=12,face=\"bold\"))\n    \n    return(gp)\n}\n\n## Heat Map\nheatMap <- function(data, clusterMethod = \"DensVM\", type = \"mean\", selectSamples,\n                    cex_row_label = 1, cex_col_label = 1, scaleMethod = \"none\") {\n    exprs <- data$expressionData\n    samples <- sub(\"_[0-9]*$\", \"\", row.names(exprs))\n    mySamples <- samples %in% selectSamples\n    exprs <- exprs[mySamples, , drop = FALSE]\n    dataj <- data$clusterRes[[clusterMethod]][mySamples]\n    exprs_cluster <- data.frame(exprs, cluster = dataj, check.names = FALSE )\n    \n    cluster_stat <- cytof_clusterStat(data = exprs_cluster,\n                             cluster = \"cluster\", \n                             statMethod = type)\n    \n    cytof_heatmap(data = as.matrix(cluster_stat), \n                  baseName = paste(clusterMethod, type), \n                  scaleMethod = scaleMethod, \n                  cex_row_label = cex_row_label, \n                  cex_col_label = cex_col_label,\n                  margins = c(8, 8), \n                  keysize = 1, \n                  key.par=list(mgp=c(2, 1, 0), mar=c(4, 3, 4, 0))) \n}\n\n\n## Combined marker expression trend\ncytof_expressionTrends <- function(data, markers, clusters, \n                                  orderCol=\"isomap_1\", \n                                  clusterCol = \"cluster\", \n                                  reverseOrder = FALSE,\n                                  addClusterLabel = TRUE,\n                                  clusterLabelSize = 5,\n                                  segmentSize = 0.5,\n                                  min_expr = NULL, \n                                  trend_formula=\"expression ~ sm.ns(Pseudotime, df=3)\"){\n    \n    if(!is.data.frame(data)) data <- data.frame(data, check.names = FALSE)\n    if(!all(markers %in% colnames(data))) stop(\"Unmatching markers found!\")\n    if(!(length(orderCol)==1 && orderCol %in% colnames(data)))\n        stop(\"Can not find orderCol in data!\")\n    if(!(length(clusterCol)==1 && clusterCol %in% colnames(data)))\n        stop(\"Can not find clusterCol in data!\")\n    if(!missing(clusters)){\n        if(!all(clusters %in% data[[clusterCol]]))\n            stop(\"Wrong clusters selected!\")\n        data <- data[data[[clusterCol]] %in% clusters, , drop=FALSE]\n    }\n    \n    if(reverseOrder){\n        newOrderCol <- paste0(orderCol, \"(reverse)\")\n        data[[newOrderCol]] <- -data[[orderCol]]\n        orderCol <- newOrderCol\n    }\n    orderValue <- data[[orderCol]]\n    data <- data[order(orderValue), c(markers, clusterCol)]\n    data$Pseudotime <- sort(orderValue)\n    \n    mdata <- melt(data, id.vars = c(\"Pseudotime\", clusterCol), \n                  variable.name = \"markers\", value.name= \"expression\")\n    colnames(mdata) <- c(\"Pseudotime\", clusterCol, \"markers\", \"expression\")\n    mdata$markers <- factor(mdata$markers)\n    mdata[[clusterCol]] <- factor(mdata[[clusterCol]])\n    min_expr <- min(mdata$expression)\n    \n    ## tobit regression\n    vgamPredict <- ddply(mdata, .(markers), function(x) { \n        fit_res <- tryCatch({\n            vg <- suppressWarnings(vgam(formula = as.formula(trend_formula), \n                                        family = VGAM::tobit(Lower = min_expr, lmu = \"identitylink\"), \n                                        data = x, maxit=30, checkwz=FALSE))\n            res <- VGAM::predict(vg, type=\"response\")\n            res[res < min_expr] <- min_expr\n            res\n        }\n        ,error = function(e) {\n            print(\"Error!\")\n            print(e)\n            res <- rep(NA, nrow(x))\n            res\n        }\n        )\n        expectation = fit_res\n        data.frame(Pseudotime=x[[\"Pseudotime\"]], expectation=expectation)\n    })\n    \n    color_by <- clusterCol\n    plot_cols <- round(sqrt(length(markers)))\n    cell_size <- 1\n    x_lab <- orderCol\n    y_lab <- \"Expression\"\n    legend_title <- \"Cluster\"\n    \n    ## copied from monocle package\n    monocle_theme_opts <- function(){\n        theme(strip.background = element_rect(colour = 'white', fill = 'white')) +\n            #theme(panel.border = element_blank(), axis.line = element_line()) +\n            theme(panel.grid.minor.x = element_blank(), panel.grid.minor.y = element_blank()) +\n            theme(panel.grid.major.x = element_blank(), panel.grid.major.y = element_blank()) + \n            theme(panel.background = element_rect(fill='white')) +\n            theme(legend.position = \"right\") +\n            theme(axis.title = element_text(size = 15)) +\n            theme(axis.text=element_text(size=8), axis.title=element_text(size=12,face=\"bold\"))}\n    \n    q <- ggplot(data=vgamPredict, aes_string(x=\"Pseudotime\", y=\"expectation\", col=\"markers\")) + geom_line(size = 1.5)\n    q <- q + ylab(y_lab) + xlab(x_lab) + theme_bw()\n    q <- q + guides(colour = guide_legend(title = legend_title, override.aes = list(size = cell_size*3)))\n    q <- q + monocle_theme_opts() \n    \n    # if(addClusterLabel){\n    #     # edata <- data[ ,c(\"Pseudotime\", clusterCol)]\n    #     # colnames(edata) <- c('x', \"z\")\n    #     # center <- aggregate(x ~ z, data = edata, median)\n    #     # center$y <- -0.5 ## add to the botom\n    #     # q <- q + geom_text_repel(data=center, aes(x=x, y=y, label=z), parse=TRUE)\n    #     mdata$cluster <- mdata[[clusterCol]]\n    #     center <- aggregate(cbind(Pseudotime, expression) ~ cluster + markers, data = mdata, median)\n    #     q <- q + geom_text_repel(data=center, aes(x=Pseudotime, y=expression, label=cluster),\n    #                              size = clusterLabelSize, fontface = 'bold',\n    #                              box.padding = unit(0.5, 'lines'),\n    #                              point.padding = unit(1.6, 'lines'),\n    #                              segment.color = '#555555',\n    #                              segment.size = segmentSize,\n    #                              arrow = arrow(length = unit(0.02, 'npc')))\n    # }\n    \n    q\n}\n\n## function for opening the results directory\nopendir <- function(dir = getwd()){\n    if (.Platform['OS.type'] == \"windows\"){\n        shell.exec(dir)\n    } else {\n        system(paste(Sys.getenv(\"R_BROWSER\"), dir))\n    }\n}\n\n\n",
    "created" : 1468216200014.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3575163747",
    "id" : "3CFFDFB5",
    "lastKnownWriteTime" : 1468374361,
    "last_content_update" : 1468374361103,
    "path" : "~/GitProject/cytofkitShinyAPP/global.R",
    "project_path" : "global.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}