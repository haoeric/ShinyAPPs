install.packages('rsconnect')
install.packages("rsconnect")
shiny::runApp()
shinyapps::appDependencies()
install.packages("KernSmooth")
install.packages("KernSmooth")
install.packages("MASS")
install.packages("Matrix")
install.packages("cluster")
install.packages("flowCore")
source("https://bioconductor.org/biocLite.R")
biocLite("flowCore")
getwd()
setwd("~/Downloads")
remove.packages("flowCore")
install.packages("flowCore_1.38.2.tar", repos = NULL, type = "source")
source("https://bioconductor.org/biocLite.R")
??biocLite
biocLite("BiocUpgrade")
remove.packages("BiocInstaller")
source("http://bioconductor.org/biocLite.R")
biocLite()
library(cytofkit)
cytofkit_GUI()
q()
shiny::runApp()
shiny::runApp()
shiny::runApp()
remove.packages("cytofkit")
source("https://bioconductor.org/biocLite.R")
biocLite("cytofkit")
?melt
require(reshape2)
?melt
shiny::runApp()
runApp()
class(iris)
colnames(iris)
iris[,"Sepal.Length"] <- 1
head(iris)
class(iris[,"Sepal.Length"])
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
?column
runApp()
runApp()
head(iris)
table(iris$Species)
as.data.frame(table(iris$Species))
?renderTable
t(table(iris$Species))
as.data.frame(t(table(iris$Species)))
t(as.data.frame(table(iris$Species)))
t(as.matrix(table(iris$Species)))
table(iris$Species)
str(table(iris$Species))
names(table(iris$Species))
as.matrix(table(iris$Species))
t(as.matrix(table(iris$Species)))
t <- table(iris$Species)
t$counts
t$count
t@counts
t
?table
as.data.frame(table(iris$Species))
clusterTable <- as.data.frame(table(iris$Species))
rbind(clusterTable[,1], clusterTable[,2])
?data.frame
?as.data.frame
clusterTable <- t(as.matrix(table(iris$Species)))
as.data.frame(clusterTable, row.names = "Cell Counts")
out <- as.data.frame(clusterTable, row.names = "Cell Counts")
row.names(out) <- paste("Cluster" row.names(out))
row.names(out) <- paste("Cluster", row.names(out))
out
colnames(out) <- paste("Cluster", colnames(out))
out
runApp()
runApp()
renderTable
?renderTable
?tableOutput
runApp()
runApp()
?datatable
??datatable
runApp()
runApp()
runApp()
r1 <- rnorm(100, 5, 5)
plot(r1)
?norm
plot(dnorm(r1))
plot(dnorm(sort(r1)))
t1 <- c(0, 1:4)
t2 <- c(0,2,4,2,0)
t1
t2
sd(t1)
sd(t2)
mean\(t2)
mean(t2)
mean(t1)
runApp()
runApp()
?h5
shiny::runApp()
