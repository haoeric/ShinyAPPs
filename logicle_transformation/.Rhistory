class(amzn)
head(amzn)
head(row.names(amzn))
head(sampleTimes)
length(grep("2007", sampleTimes))
class(sampleTimes)
weekdays(sampleTimes[1])
length(grep("Monday", weekdays(grep("2007", sampleTimes))))
grep("2007", sampleTimes)[1]
grep("2007", sampleTimes)[2]
sampleTimes[grep("2007", sampleTimes)[2]]
length(grep("Monday", weekdays(sampleTimes[grep("2007", sampleTimes)])))
length(grep("2012", sampleTimes))
length(grep("Monday", weekdays(sampleTimes[grep("2012", sampleTimes)])))
?strsplit
strsplit <- strsplit("a.b.c", ".", fixed = TRUE)
class(strsplit)
strsplit[[1]]
libpath()
libPaths()
library()
search()
installed.packages()
help(xlsx)
help('xlsx')
help(zoo)
help(package="xlsx")
?package.skeleton()
getwd()
require(stats)
## two functions and two "data sets" :
f <- function(x, y) x+y
g <- function(x, y) x-y
d <- data.frame(a = 1, b = 2)
e <- rnorm(1000)
package.skeleton(list = c("f","g","d","e"), name = "mypkg")
getwd()
require(stats)
## two functions and two "data sets" :
f <- function(x, y) x+y
g <- function(x, y) x-y
d <- data.frame(a = 1, b = 2)
e <- rnorm(1000)
package.skeleton(list = c("f","g","d","e"), name = "mypkg")
?abline
setwd("~/Ranalysis")
install.packages("SIDAP_1.0.tar.gz", repos = NULL, type = "source")
system("defaults write org.R-project.R force.LANG en_US.UTF-8")
install.packages("SIDAP_1.0.tar.gz", repos = NULL, type = "source")
?all
source('~/.active-rstudio-document')
install.packages("fun")
library(fun)
help.start("fun")
help.start()
help("fun")
demo(package = "fun")
demo("ChinaHeart2D", package = "fun")
if (.Platform$OS.type == "windows") x11() else x11(type = "Xlib")
mine_sweeper()
gomoku()
mine_sweeper()
mine_sweeper()
if (.Platform$OS.type == "windows") x11() else x11(type = "Xlib")
mine_sweeper()
exit()
exit
quit
quit()
L
l
a <- matrix(2,2,2)
a
a[-1,]
dim(a[-1,])
version()
session()
sessionInfo()
search()
sessionInfo()
remove.packages("sidap")
sessionInfo()
.libPaths()
SIDAP_firstRun <- function() {
if (!require(tcltk, quietly = TRUE)) {
install.packages("tcltk")
}
if (!require(Rtsne, quietly = TRUE)) {
install.packages("Rtsne")
}
if (!require(flowCore)) {
source("http://bioconductor.org/biocLite.R")
biocLite("flowCore", ask = FALSE)
}
if (!require(mclust)) {
source("http://bioconductor.org/biocLite.R")
biocLite("mclust", ask = FALSE)
}
if (!require(gplots)) {
source("http://bioconductor.org/biocLite.R")
biocLite("gplots", ask = FALSE)
}
if (!require(reshape)) {
source("http://bioconductor.org/biocLite.R")
biocLite("reshape", ask = FALSE)
}
if (!require(graphics)) {
source("http://bioconductor.org/biocLite.R")
biocLite("graphics", ask = FALSE)
}
if (!require(ggplot2)) {
source("http://bioconductor.org/biocLite.R")
biocLite("ggplot2", ask = FALSE)
}
if (!require(e1071)) {
source("http://bioconductor.org/biocLite.R")
biocLite("e1071", ask = FALSE)
}
if (!require(lle)) {
source("http://bioconductor.org/biocLite.R")
biocLite("lle", ask = FALSE)
}
if (!require(vegan)) {
source("http://bioconductor.org/biocLite.R")
biocLite("vegan", ask = FALSE)
}
}
SIDAP_firstRun
SIDAP_firstRun()
remove.packages("tcltk")
install.packages("tcltk")
install.packages("tcltk")
install.packages("tcltk")
capabilities("tcltk")
library(tcltk)
.libPaths()
library("tcltk")
library(Rtsne)
getwd(0])
getwd()
install.packages("sidap_0.99.6.tar.gz", repos = NULL, type = "source")
library("sidap")
cytof_tsne_densvm_GUI()
.libPaths()
install.packages("shiny")
library(shiny)
runExample("01_hello")
ls()
search()
$HOME
getwd($HOME)
getwd(R$HOME)
?home
??home
searchpaths()
RHOME
RHOME()
R.home()
ls()
shiny::runApp('transformation_function')
setwd("~/Desktop/MHC study")
mhc <- read.table("mhc_sig_association_pairs.txt", sep = "\t", colnames = 1, head = TRUE)
mhc <- read.table("mhc_sig_association_pairs.txt", sep = "\t", col.names = 1, head = TRUE)
mhc <- read.table("mhc_sig_association_pairs.txt", sep = "\t", row.names = 1, head = TRUE)
head(mhc)
head(mhc)
mhc[mhc$SNP_CHR == 19,]
mhc[mhc$SNP_CHR == 12,]
head(mhc)
library(ggplot2)
ggplot(mhc, aes(x = HOT_LOC, y = SNP_CHR))
ggplot(mhc, aes(x = HOT_LOC, y = SNP_CHR)) + geom_point()
ggplot(mhc, aes(x = HOT_LOC, y = SNP_CHR)) + geom_point(size = -log(P))
ggplot(mhc, aes(x = HOT_LOC, y = SNP_CHR)) + geom_point(size = -log(mhc$P))
summary(-log(mhc$P))
ggplot(mhc, aes(x = HOT_LOC, y = SNP_CHR)) + geom_point(size = 2, col = mhc$SNP_CHR)
ggplot(mhc, aes(x = HOT_LOC, y = SNP_LOC)) + geom_point(size = 2, col = mhc$SNP_CHR)
ggplot(mhc, aes(x = HOT_LOC, y = SNP_LOC, col = SNP_CHR)) + geom_point(size = 2) + geom_text(aes(y = mhc$SNP_LOC[mhc$SNP_CHR != 6] + 0.1, label = SNP_RS), size = 3)
ggplot(mhc, aes(x = HOT_LOC, y = SNP_LOC, col = SNP_CHR)) + geom_point(size = 2) + geom_text(aes(y = mhc$SNP_LOC[mhc$SNP_CHR != 6] + 0.1, label = mhc$SNP_RS[mhc$SNP_CHR != 6]), size = 3) + ylim(c(6,12,19))
ggplot(mhc, aes(x = HOT_LOC, y = SNP_LOC, col = SNP_CHR)) + geom_point(size = 2) + geom_text(aes(y = mhc$SNP_LOC[mhc$SNP_CHR != 6] + 0.1, label = mhc$SNP_RS[mhc$SNP_CHR != 6]), size = 3)
ggplot(mhc, aes(x = HOT_LOC, y = SNP_LOC, col = SNP_CHR)) + geom_point(size = 2) + geom_text(aes(y = SNP_LOC[mhc$SNP_CHR != 6] + 0.1, label = SNP_RS[mhc$SNP_CHR != 6]), size = 3)
mhc$SNP_LOC[mhc$SNP_CHR != 6]
mhc$SNP_RS[mhc$SNP_CHR != 6]
ggplot(mhc, aes(x = HOT_LOC, y = SNP_LOC, col = SNP_CHR)) + geom_point(size = 2) + facet_grid(SNP_CHR ~.)
ggplot(mhc, aes(x = HOT_LOC, y = SNP_LOC, col = SNP_CHR)) + geom_point(size = 2) + facet_grid(SNP_CHR ~., scale = "free")
ggplot(mhc, aes(x = HOT_LOC, y = SNP_LOC, col = SNP_CHR)) + geom_point(size = 2) + facet_grid(SNP_CHR ~., scale = "free_y")
ggplot(mhc, aes(x = HOT_LOC, y = SNP_LOC, col = "red")) + geom_point(size = 2) + facet_grid(SNP_CHR ~., scale = "free_y")
abline(y = 31111)
abline(v = 31111)
source("http://bioconductor.org/biocLite.R")
biocLite("GenomeGraphs")
biocLite("GenomeGraphs")
library("GenomeGraphs", lib.loc="~/Library/R/3.1/library")
browseVignettes("GenomeGraphs")
head(mhc)
?gDplot
?gdPlot
data("exampleData", package="GenomeGraphs")
str(probestart)
ls()
minbase = min(probestart)
maxbase = max(probestart)
mart = useMart("ensembl", dataset="hsapiens_gene_ensembl")
genesplus = new("GeneRegion", start = minbase, end = maxbase, strand = "+", chromosome = "3", biomart=mart)
genesmin = new("GeneRegion", start = minbase, end = maxbase, strand = "-", chromosome = "3", biomart=mart)
seg <- new("Segmentation", segments = segments[[1]],
segmentStart = segStart[[1]], segmentEnd = segEnd[[1]],
dp = DisplayPars(color = "dodgerblue2", lwd=2,lty = "dashed"))
cop <- new("GenericArray", intensity  = cn, probeStart = probestart,
trackOverlay =  seg, dp = DisplayPars(size=3, color = "seagreen", type="dot"))
ideog = new("Ideogram", chromosome = "3")
expres = new("GenericArray", intensity = intensity, probeStart = exonProbePos,
dp = DisplayPars(color="darkred", type="point"))
genomeAxis = new("GenomeAxis", add53 = TRUE, add35=TRUE)
gdPlot(list(ideog,expres,cop,genesplus,genomeAxis,genesmin), minBase = minbase, maxBase =maxbase)
setwd("~/Ranalysis/logicle_transformation")
library(flowCore)
?estimateLogicle
setwd("~/Desktop/SingleCell/data/flow")
dir()
fcsFile <- "~/Desktop/SingleCell/data/flow/HuLiver_HBV_Tube005_nodead.fcs"
fcsData <- read.FCS(fcsFile, verbose = FALSE)
?read.FCS
fcsData <- read.FCS(fcsFile)
fcsData <- read.FCS(fcsFile, transform = FALSE)
fcsData <- read.FCS(fcsFile, transformation = FALSE)
colnames(fcsData)
source("http://bioconductor.org/biocLite.R")
biocLite("flowViz")
plotDens <- function(flow.frame, channels, col, main, xlab, ylab, pch = ".", s = FALSE, outdir, file.name, devn= TRUE, ...){
##===================================================
## Plot flowCytometry data with density-based color
##---------------------------------------------------
f.exprs <- exprs(flow.frame)
f.data <- pData(parameters(flow.frame))
f.col.names <- colnames(flow.frame)
if(missing(col)){
colPalette <- colorRampPalette(c("blue", "turquoise", "green", "yellow", "orange", "red"))
col <- densCols(f.exprs[,channels], colramp = colPalette)
}
if(is.numeric(channels))
channels <- f.col.names[channels]
if(missing(xlab))
xlab <- paste("<", channels[1], ">:", f.data$desc[which(f.col.names==channels[1])], sep = "")
if(missing(ylab))
ylab <- paste("<", channels[2], ">:", f.data$desc[which(f.col.names==channels[2])], sep = "")
if(missing(main))
main <- "All Events"
if(s){
if(!missing(file.name))
fn <- paste(file.name, channels[2], channels[1], sep="_")
else
fn <- paste(channels[2], channels[1], sep="_")
if(missing(outdir))
outdir <- getwd()
bmp(filename=paste(outdir, fn, sep="/"), width=800, height=800);
plot(f.exprs[,channels], col = col, pch = pch, main = main, xlab = xlab, ylab = ylab, ...)
dev.off()
}else{
if(devn)
dev.new()
plot(f.exprs[,channels], col = col, pch = pch, main = main, xlab = xlab, ylab = ylab, ...)
}
}
plotDens(flowData, channels=c("Brilliant UV395-A", "Brilliant Violet 650-A"))
plotDens(fcsData, channels=c("Brilliant UV395-A", "Brilliant Violet 650-A"))
pData(fcsData)
pData(fcsData@description)
fcsData@description
pData(fcsData@parameters)
desname <- pData(fcsData@parameters)$desc
desname
for(i in 1:length(channels)){
}
markers <- vector()
for(i in 1:length(channels)){
markers[i] <- paste("<", channels[i], ">:", desname[i], sep = "")
}
channels <- colnames(fcsData)
desname <- pData(fcsData@parameters)$desc
markers <- vector()
for(i in 1:length(channels)){
markers[i] <- paste("<", channels[i], ">:", desname[i], sep = "")
}
markers
library("flowTrans", lib.loc="~/Library/R/3.1/library")
plotDens(flowData, channels=c("Brilliant UV395-A", "Brilliant Violet 650-A"))
plotDens(fcsData, channels=c("Brilliant UV395-A", "Brilliant Violet 650-A"))
w = 0.5
t = 262144,
m = 4.5
a = 0
lgcl <- logicleTransform( w = w, t= t, m = m, a = a)
after <- transform(samp, "Brilliant UV395-A" = lgcl("Brilliant UV395-A"), "Brilliant Violet 650-A" = lgcl("Brilliant Violet 650-A"))
after <- transform(fcsData, "Brilliant UV395-A" = lgcl("Brilliant UV395-A"), "Brilliant Violet 650-A" = lgcl("Brilliant Violet 650-A"))
lgcl <- estimateLogicle(fcsData, channels = c("Brilliant UV395-A", "Brilliant Violet 650-A"))
after <- transform(fcsData, lgcl)
plotDens(after, channels=c("Brilliant UV395-A", "Brilliant Violet 650-A"))
after <- transform(fcsData, 'Brilliant UV395-A' = lgcl('Brilliant UV395-A'), 'Brilliant Violet 650-A' = lgcl('Brilliant Violet 650-A'))
lgcl <- logicleTransform( w = w, t= t, m = m, a = a)
after <- transform(fcsData, 'Brilliant UV395-A' = lgcl('Brilliant UV395-A'), 'Brilliant Violet 650-A' = lgcl('Brilliant Violet 650-A'))
?transform
lgcl <- logicleTransform( w = w, t= t, m = m, a = a)
after <- transform(fcsData, lgcl)
w = 0.5
t = 262144,
m = 4.5
a = 0
lgcl <- logicleTransform( w = w, t= t, m = m, a = a)
after <- transform(fcsData, lgcl)
w = 0.5
t = 262144
m = 4.5
a = 0
lgcl <- logicleTransform( w = w, t= t, m = m, a = a)
after <- transform(fcsData, lgcl)
?logicleTransform
data(GvHD)
samp <- GvHD[[1]]
## User defined logicle function
lgcl <- logicleTransform( w = 0.5, t= 10000, m =4.5)
after <- transform(samp, `FL1-H` = lgcl(`FL1-H`), `FL2-H` = lgcl(`FL2-H`))
plotDens(after, channels=c("Brilliant UV395-A", "Brilliant Violet 650-A"))
plotDens(after, channels=c("FL1-H", "FL2-H"))
lgcl <- logicleTransform( w = 0.5, t= 10000, m =4.5)
after <- transform(fcsData, `Brilliant UV395-A` = lgcl(`Brilliant UV395-A`), `Brilliant Violet 650-A` = lgcl(`Brilliant Violet 650-A`))
plotDens(after, channels=c("Brilliant UV395-A", "Brilliant Violet 650-A"))
lgcl <- logicleTransform( w = 0.5, t= 10000, m =4.5, a = 0)
after <- transform(fcsData, `Brilliant UV395-A` = lgcl(`Brilliant UV395-A`), `Brilliant Violet 650-A` = lgcl(`Brilliant Violet 650-A`))
channeld
channels
?flowTrans
transformed<-lapply(as(fcsData[,c(7,10)],"list"),
function(x)flowTrans(dat=x,fun="mclMultivBiexp",dims=c("Brilliant UV395-A", "Brilliant Violet 650-A"),n2f=FALSE,parameters.only=FALSE))
transformed<-lapply(as(fcsData[,c(7,10)],"list"),
function(x)flowTrans(dat=fcsData,fun="mclMultivBiexp",dims=c("Brilliant UV395-A", "Brilliant Violet 650-A"),n2f=FALSE,parameters.only=FALSE))
head(exprs(fcsData))
transformed<-lapply(as(exprs(fcsData)[,c(7,10)],"list"),
function(x)flowTrans(dat=x,fun="mclMultivBiexp",dims=c("Brilliant UV395-A", "Brilliant Violet 650-A"),n2f=FALSE,parameters.only=FALSE))
transformed<-flowTrans(dat=fcsData,fun="mclMultivBiexp",dims=c("Brilliant UV395-A", "Brilliant Violet 650-A"),n2f=FALSE,parameters.only=FALSE))
transformed<-flowTrans(dat=fcsData,fun="mclMultivBiexp",dims=c("Brilliant UV395-A", "Brilliant Violet 650-A"),n2f=FALSE,parameters.only=FALSE)
plotDens(transformed, channels=c("Brilliant UV395-A", "Brilliant Violet 650-A"))
str(transformed)
contour(transformed$result[,1:2], main="Transformed FSC vs SSC")
plotDens(transformed$result, channels=c("Brilliant UV395-A", "Brilliant Violet 650-A"))
summary(transformed$result@exprs)
estimateLogicle
range(fcsData)
.lgclTran
.lgclTrans
flowCore:::.lgclTrans
.Machine$double.eps
quantile(c(1,2,3,4,5,6,7,8,9,10), 0.1)
quantile(c(1,2,3,4,5,6,7,8,9,10), 0.5)
?quantile
quantile(c(1,2,3,4,5,6,7,8,9,10), 02)
quantile(c(1,2,3,4,5,6,7,8,9,10), 2)
quantile(c(1,2,3,4,5,6,7,8,9,10), 0.2)
quantile
quantile(c(1,2,3,4,5,6,7,8,9,10))
quantile(c(1,2,3,4,5,6,7,8,9,10), 0.125)
quantile(c(1,2,3,6,7,8,9,10), 0.125)
quantile(c(1,2,3,6,7,8,9,10))
plotDens(after, channels=c("Brilliant UV395-A", "Brilliant Violet 650-A"))
lgcl <- logicleTransform( w = 0.5, t= 10000, m =4.5, a = 0)
after <- transform(fcsData, `Brilliant UV395-A` = lgcl(`Brilliant UV395-A`), `Brilliant Violet 650-A` = lgcl(`Brilliant Violet 650-A`))
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
grep(3, c(1,2,3))
shiny::runApp('~/Ranalysis/logicle_transformation')
shiny::runApp('~/Ranalysis/logicle_transformation')
logicleTransform
shiny::runApp('~/Ranalysis/logicle_transformation')
getwd()
setwd("~/Ranalysis/transformation_function")
setwd("~/Ranalysis/logicle_transformation")
?plotDens
??plotDens
sessionInfo()
?plotDens
library(flowCore)
library(flowCore)
?plotDens
library(flowTrans)
?plotDens
?par
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
ls()
object.size(fcsData)
shiny::runApp()
install.packages('flowDensity')
source("http://bioconductor.org/biocLite.R")
biocLite("flowDensity")
shiny::runApp()
?plot
?axis
shiny::runApp()
colnames(fcsData)
plotDens(fcsData, channels=c("Brilliant UV395-A", "Brilliant Violet 421-A"), tck = 0.5)
plotDens(fcsData, channels=c("Brilliant UV395-A", "Brilliant Violet 421-A"), asp = 1)
shiny::runApp()
shiny::runApp()
shiny::runApp()
estimateLogicle
log(base = 10, 262144)
sort(c(3,2,5))
exit()
